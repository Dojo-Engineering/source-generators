using System;
using System.Linq;
using System.CodeDom.Compiler;
using {{ProjectNamespace}}.Generated.Common;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.Extensions.DependencyInjection;
using NSwag.Generation.AspNetCore;

namespace {{ProjectNamespace}}.Generated.StartupConfiguration
{
    [GeneratedCode("Dojo.OpenApiGenerator", "{{AssemblyVersion}}")]
    public static class ApiConfigurator
    {
        public static IServiceCollection AddOpenApiVersioning(
            this IServiceCollection services,
            string title,
            string versionHeaderName = "version",
            string infoTitle = "API",
            IApiVersionReader versionReader = null,
            IErrorResponseProvider errorResponseProvider = null,
            ApiVersion defaultVersion = null,
            bool assumeDefaultVersionWhenUnspecified = true,
            bool reportApiVersions = true)
        {
            services.AddApiVersioning(options =>
            {
                options.AssumeDefaultVersionWhenUnspecified = assumeDefaultVersionWhenUnspecified;
                options.DefaultApiVersion = defaultVersion ?? ApiVersion.Default;
                options.ApiVersionReader = versionReader ?? new HeaderApiVersionReader(versionHeaderName);
                options.ReportApiVersions = reportApiVersions;

                if (errorResponseProvider != null)
                {
                    options.ErrorResponses = errorResponseProvider;
                }
            });

            services.AddVersionedApiExplorer();

            foreach (var apiVersion in ApiConstants.ApiVersions)
            {
                services.AddOpenApiDocument(document => ConfigureSingleVersion(title, document, apiVersion, infoTitle));
            }

            return services;
        }

        public static void UseOpenApiWithSwagger(this IApplicationBuilder app, IWebHostEnvironment env, bool includeEnvironmentName)
        {
            var serverUrl = string.Empty;

            app.UseOpenApi(options =>
            {
                options.Path = "/api/swagger/{documentName}/swagger.json";

                if (includeEnvironmentName)
                {
                    options.PostProcess = (document, _) =>
                    {
                        document.Servers.First().Url += $"/{env.EnvironmentName}";
                        serverUrl = document.Servers.First().Url;
                    };
                }
            });

            app.UseSwaggerUi3(x =>
            {
                x.Path = "/api/swagger";
                x.DocumentPath = "/api/swagger/{documentName}/swagger.json";

                if (includeEnvironmentName)
                {
                    x.TransformToExternalPath = (url, _) =>
                    {
                        x.ServerUrl = serverUrl;
                        return url.EndsWith(".json", StringComparison.OrdinalIgnoreCase)
                            ? x.ServerUrl + url
                            : url;
                    };
                }
            });
        }

        private static void ConfigureSingleVersion(
            string title,
            AspNetCoreOpenApiDocumentGeneratorSettings configure,
            string version,
            string infoTitle)
        {
            configure.Title = title;
            configure.DocumentName = version;
            configure.ApiGroupNames = new[] { version };

            configure.PostProcess = document =>
            {
                document.Info.Version = version;
                document.Info.Title = infoTitle;
            };
        }
    }
}
